name: Python CI/CD Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout source code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"  # Updated Python version

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run build step (generate artifacts)
      run: |
        mkdir -p dist
        echo "Build output for Python project" > dist/output.txt

    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: python-build
        path: dist/
        retention-days: 7  # Retain the artifact for 7 days

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout source code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"

    - name: Download build artifact
      uses: actions/download-artifact@v3
      with:
        name: python-build

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      #working-directory: project2  # Ensure this is the correct root folder
      run: |
        python -m pytest tests/test_example.py
  terraform:
    runs-on: ubuntu-latest  # Use an Ubuntu runner

    steps:
      # Checkout the code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2.0.3
    

      # Configure AWS credentials (example for AWS, change if using other providers)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: ${{ secrets.AWS_DEFAULT_REGION }}

      # Initialize Terraform
      - name: Terraform Init
        run: terraform init

      # Validate Terraform configuration
      - name: Terraform Validate
        run: terraform validate

      # Run Terraform Plan (to preview changes)
      - name: Terraform Plan
        run: terraform plan

      # Apply Terraform changes (only if it's a push to main or a merge to main)
      - name: Terraform Apply
        run: terraform apply -auto-approve
