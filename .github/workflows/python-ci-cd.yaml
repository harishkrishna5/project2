name: Python CI/CD Workflow

on:
  workflow_dispatch:
 # push:
#    branches:
  #    - main
#  pull_request:
 #   branches:
  #    - main
permissions:
  contents: read
  id-token: write
  
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout source code
      uses: actions/checkout@v3
      with: 
        path: 'src'

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"  # Updated Python version

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run build step (generate artifacts)
      run: |
        mkdir -p dist
        echo "Build output for Python project" > dist/output.txt

    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: python-build
        path: dist/
        retention-days: 7  # Retain the artifact for 7 days

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout source code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"

    - name: Download build artifact
      uses: actions/download-artifact@v3
      with:
        name: python-build

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt  

    - name: Run tests
      #working-directory: project2  # Ensure this is the correct root folder
      run: |
        python -m pytest tests/test_example.py

   
  terraform :
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout source code
      uses: actions/checkout@v3
    - name: List files for debugging
      run: ls -alh
    - name: Set up AWS credentials using OIDC
      uses: aws-actions/configure-aws-credentials@v3
      with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}  # Use the role ARN from secrets
         # role-session-name: GitHubActionsSession
          aws-region: ${{ secrets.AWS_REGION }}  
    - name: List S3 buckets
      run: aws s3 ls

      # Change to the directory containing Terraform files
   # - name: Change directory to my-terraform-project
   #   run: cd terraform

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.4.0  # Specify the Terraform version you need

    - name: Terraform Init
 
      run: terraform init

    - name: Terraform Plan
     # env:
     #   TF_LOG: DEBUG
        
      run: |
        cd terraform
        terraform init
        terraform plan -out=tfplan
    - name: List files to debug
      run: ls -la

    - name: Terraform Apply
      run: |
        cd terraform
        terraform apply -auto-approve tfplan
    - name: Run Destroy Script
      run: bash destroy.sh
